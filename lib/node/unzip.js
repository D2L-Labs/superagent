"use strict";

/**
 * Module dependencies.
 */
var _require = require('string_decoder'),
    StringDecoder = _require.StringDecoder;

var Stream = require('stream');

var zlib = require('zlib');
/**
 * Buffers response data events and re-emits when they're unzipped.
 *
 * @param {Request} req
 * @param {Response} res
 * @api private
 */


exports.unzip = function (req, res) {
  var unzip = zlib.createUnzip();
  var stream = new Stream();
  var decoder; // make node responseOnEnd() happy

  stream.req = req;
  unzip.on('error', function (err) {
    if (err && err.code === 'Z_BUF_ERROR') {
      // unexpected end of file is ignored by browsers and curl
      stream.emit('end');
      return;
    }

    stream.emit('error', err);
  }); // pipe to unzip

  res.pipe(unzip); // override `setEncoding` to capture encoding

  res.setEncoding = function (type) {
    decoder = new StringDecoder(type);
  }; // decode upon decompressing with captured encoding


  unzip.on('data', function (buf) {
    if (decoder) {
      var str = decoder.write(buf);
      if (str.length > 0) stream.emit('data', str);
    } else {
      stream.emit('data', buf);
    }
  });
  unzip.on('end', function () {
    stream.emit('end');
  }); // override `on` to capture data listeners

  var _on = res.on;

  res.on = function (type, fn) {
    if (type === 'data' || type === 'end') {
      stream.on(type, fn.bind(res));
    } else if (type === 'error') {
      stream.on(type, fn.bind(res));

      _on.call(res, type, fn);
    } else {
      _on.call(res, type, fn);
    }

    return this;
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ub2RlL3VuemlwLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJTdHJpbmdEZWNvZGVyIiwiU3RyZWFtIiwiemxpYiIsImV4cG9ydHMiLCJ1bnppcCIsInJlcSIsInJlcyIsImNyZWF0ZVVuemlwIiwic3RyZWFtIiwiZGVjb2RlciIsIm9uIiwiZXJyIiwiY29kZSIsImVtaXQiLCJwaXBlIiwic2V0RW5jb2RpbmciLCJ0eXBlIiwiYnVmIiwic3RyIiwid3JpdGUiLCJsZW5ndGgiLCJfb24iLCJmbiIsImJpbmQiLCJjYWxsIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtlQUUwQkEsT0FBTyxDQUFDLGdCQUFELEM7SUFBekJDLGEsWUFBQUEsYTs7QUFDUixJQUFNQyxNQUFNLEdBQUdGLE9BQU8sQ0FBQyxRQUFELENBQXRCOztBQUNBLElBQU1HLElBQUksR0FBR0gsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRUFJLE9BQU8sQ0FBQ0MsS0FBUixHQUFnQixVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUM1QixNQUFNRixLQUFLLEdBQUdGLElBQUksQ0FBQ0ssV0FBTCxFQUFkO0FBQ0EsTUFBTUMsTUFBTSxHQUFHLElBQUlQLE1BQUosRUFBZjtBQUNBLE1BQUlRLE9BQUosQ0FINEIsQ0FLNUI7O0FBQ0FELEVBQUFBLE1BQU0sQ0FBQ0gsR0FBUCxHQUFhQSxHQUFiO0FBRUFELEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLE9BQVQsRUFBa0IsVUFBQ0MsR0FBRCxFQUFTO0FBQ3pCLFFBQUlBLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxJQUFKLEtBQWEsYUFBeEIsRUFBdUM7QUFDckM7QUFDQUosTUFBQUEsTUFBTSxDQUFDSyxJQUFQLENBQVksS0FBWjtBQUNBO0FBQ0Q7O0FBRURMLElBQUFBLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZLE9BQVosRUFBcUJGLEdBQXJCO0FBQ0QsR0FSRCxFQVI0QixDQWtCNUI7O0FBQ0FMLEVBQUFBLEdBQUcsQ0FBQ1EsSUFBSixDQUFTVixLQUFULEVBbkI0QixDQXFCNUI7O0FBQ0FFLEVBQUFBLEdBQUcsQ0FBQ1MsV0FBSixHQUFrQixVQUFDQyxJQUFELEVBQVU7QUFDMUJQLElBQUFBLE9BQU8sR0FBRyxJQUFJVCxhQUFKLENBQWtCZ0IsSUFBbEIsQ0FBVjtBQUNELEdBRkQsQ0F0QjRCLENBMEI1Qjs7O0FBQ0FaLEVBQUFBLEtBQUssQ0FBQ00sRUFBTixDQUFTLE1BQVQsRUFBaUIsVUFBQ08sR0FBRCxFQUFTO0FBQ3hCLFFBQUlSLE9BQUosRUFBYTtBQUNYLFVBQU1TLEdBQUcsR0FBR1QsT0FBTyxDQUFDVSxLQUFSLENBQWNGLEdBQWQsQ0FBWjtBQUNBLFVBQUlDLEdBQUcsQ0FBQ0UsTUFBSixHQUFhLENBQWpCLEVBQW9CWixNQUFNLENBQUNLLElBQVAsQ0FBWSxNQUFaLEVBQW9CSyxHQUFwQjtBQUNyQixLQUhELE1BR087QUFDTFYsTUFBQUEsTUFBTSxDQUFDSyxJQUFQLENBQVksTUFBWixFQUFvQkksR0FBcEI7QUFDRDtBQUNGLEdBUEQ7QUFTQWIsRUFBQUEsS0FBSyxDQUFDTSxFQUFOLENBQVMsS0FBVCxFQUFnQixZQUFNO0FBQ3BCRixJQUFBQSxNQUFNLENBQUNLLElBQVAsQ0FBWSxLQUFaO0FBQ0QsR0FGRCxFQXBDNEIsQ0F3QzVCOztBQUNBLE1BQU1RLEdBQUcsR0FBR2YsR0FBRyxDQUFDSSxFQUFoQjs7QUFDQUosRUFBQUEsR0FBRyxDQUFDSSxFQUFKLEdBQVMsVUFBVU0sSUFBVixFQUFnQk0sRUFBaEIsRUFBb0I7QUFDM0IsUUFBSU4sSUFBSSxLQUFLLE1BQVQsSUFBbUJBLElBQUksS0FBSyxLQUFoQyxFQUF1QztBQUNyQ1IsTUFBQUEsTUFBTSxDQUFDRSxFQUFQLENBQVVNLElBQVYsRUFBZ0JNLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRakIsR0FBUixDQUFoQjtBQUNELEtBRkQsTUFFTyxJQUFJVSxJQUFJLEtBQUssT0FBYixFQUFzQjtBQUMzQlIsTUFBQUEsTUFBTSxDQUFDRSxFQUFQLENBQVVNLElBQVYsRUFBZ0JNLEVBQUUsQ0FBQ0MsSUFBSCxDQUFRakIsR0FBUixDQUFoQjs7QUFDQWUsTUFBQUEsR0FBRyxDQUFDRyxJQUFKLENBQVNsQixHQUFULEVBQWNVLElBQWQsRUFBb0JNLEVBQXBCO0FBQ0QsS0FITSxNQUdBO0FBQ0xELE1BQUFBLEdBQUcsQ0FBQ0csSUFBSixDQUFTbEIsR0FBVCxFQUFjVSxJQUFkLEVBQW9CTSxFQUFwQjtBQUNEOztBQUVELFdBQU8sSUFBUDtBQUNELEdBWEQ7QUFZRCxDQXRERCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTW9kdWxlIGRlcGVuZGVuY2llcy5cbiAqL1xuXG5jb25zdCB7IFN0cmluZ0RlY29kZXIgfSA9IHJlcXVpcmUoJ3N0cmluZ19kZWNvZGVyJyk7XG5jb25zdCBTdHJlYW0gPSByZXF1aXJlKCdzdHJlYW0nKTtcbmNvbnN0IHpsaWIgPSByZXF1aXJlKCd6bGliJyk7XG5cbi8qKlxuICogQnVmZmVycyByZXNwb25zZSBkYXRhIGV2ZW50cyBhbmQgcmUtZW1pdHMgd2hlbiB0aGV5J3JlIHVuemlwcGVkLlxuICpcbiAqIEBwYXJhbSB7UmVxdWVzdH0gcmVxXG4gKiBAcGFyYW0ge1Jlc3BvbnNlfSByZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmV4cG9ydHMudW56aXAgPSAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgdW56aXAgPSB6bGliLmNyZWF0ZVVuemlwKCk7XG4gIGNvbnN0IHN0cmVhbSA9IG5ldyBTdHJlYW0oKTtcbiAgbGV0IGRlY29kZXI7XG5cbiAgLy8gbWFrZSBub2RlIHJlc3BvbnNlT25FbmQoKSBoYXBweVxuICBzdHJlYW0ucmVxID0gcmVxO1xuXG4gIHVuemlwLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICBpZiAoZXJyICYmIGVyci5jb2RlID09PSAnWl9CVUZfRVJST1InKSB7XG4gICAgICAvLyB1bmV4cGVjdGVkIGVuZCBvZiBmaWxlIGlzIGlnbm9yZWQgYnkgYnJvd3NlcnMgYW5kIGN1cmxcbiAgICAgIHN0cmVhbS5lbWl0KCdlbmQnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcnIpO1xuICB9KTtcblxuICAvLyBwaXBlIHRvIHVuemlwXG4gIHJlcy5waXBlKHVuemlwKTtcblxuICAvLyBvdmVycmlkZSBgc2V0RW5jb2RpbmdgIHRvIGNhcHR1cmUgZW5jb2RpbmdcbiAgcmVzLnNldEVuY29kaW5nID0gKHR5cGUpID0+IHtcbiAgICBkZWNvZGVyID0gbmV3IFN0cmluZ0RlY29kZXIodHlwZSk7XG4gIH07XG5cbiAgLy8gZGVjb2RlIHVwb24gZGVjb21wcmVzc2luZyB3aXRoIGNhcHR1cmVkIGVuY29kaW5nXG4gIHVuemlwLm9uKCdkYXRhJywgKGJ1ZikgPT4ge1xuICAgIGlmIChkZWNvZGVyKSB7XG4gICAgICBjb25zdCBzdHIgPSBkZWNvZGVyLndyaXRlKGJ1Zik7XG4gICAgICBpZiAoc3RyLmxlbmd0aCA+IDApIHN0cmVhbS5lbWl0KCdkYXRhJywgc3RyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLmVtaXQoJ2RhdGEnLCBidWYpO1xuICAgIH1cbiAgfSk7XG5cbiAgdW56aXAub24oJ2VuZCcsICgpID0+IHtcbiAgICBzdHJlYW0uZW1pdCgnZW5kJyk7XG4gIH0pO1xuXG4gIC8vIG92ZXJyaWRlIGBvbmAgdG8gY2FwdHVyZSBkYXRhIGxpc3RlbmVyc1xuICBjb25zdCBfb24gPSByZXMub247XG4gIHJlcy5vbiA9IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgIGlmICh0eXBlID09PSAnZGF0YScgfHwgdHlwZSA9PT0gJ2VuZCcpIHtcbiAgICAgIHN0cmVhbS5vbih0eXBlLCBmbi5iaW5kKHJlcykpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgc3RyZWFtLm9uKHR5cGUsIGZuLmJpbmQocmVzKSk7XG4gICAgICBfb24uY2FsbChyZXMsIHR5cGUsIGZuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgX29uLmNhbGwocmVzLCB0eXBlLCBmbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59O1xuIl19